package com.boot.utils.auto;

import com.boot.utils.StringUtil;

import java.util.*;

public class AutoCodeMain {

    /** 数据库连接 */
    private static final ConnDB ysConnDB = new ConnDB("com.mysql.jdbc.Driver", "jdbc:mysql://10.1.1.3:3306", "yscredit", "root", "root");
    /** 包名 */
    private static final String packageName = "com.boot";
    /** 模板路径 */
    private static final String templateDir = (AutoCodeMain.class.getResource("/") + "autogenerator").substring(6);
    /** 生成文件路径 */
    private static final String srcFile = "F:\\autoGenerated";
    private static final String xmlFile = "F:\\autoGenerated";
    /** 表名 */
    private static String[] tableNames = new String[]{"user_api"};

    private static String[] fileNameArray = new String[]{"bo","vo","dao","mapper","mapperXml","service","controller","serviceImpl"};
    private static String[] methodArray = new String[]{"controller","dao","mapper","mapperXml","service","serviceImpl"};

    /**
     *
     */
    public static void main(String[] args) throws Exception {

        autoCreateCode();
//        autoAddApi();

        // 1、确认需要执行的环节 ，比如 controller 、service 、dao 、mapper 、dtf
        // 2、确认名称、参数、返回值
        // 3、特殊场景：比如联合查询 、验证方法是否存在等等。
    }


    private static void autoCreateCode () throws Exception{
        //表名
        String[] tableNames = new String[]{"user_api"};
        //实例化
        AutoCodeUtils autoGenerationJavaCode = new AutoCodeUtils(ysConnDB, packageName, tableNames, srcFile, templateDir,xmlFile);
        //调用生成java代码方法
        List<Method> methods = new LinkedList<>();
        methods.add(getAutoMethod());
        autoGenerationJavaCode.autoCreateCode(fileNameArray,methods);
    }

    private static void autoAddApi () throws Exception{

        //表名
        String[] tableNames = new String[]{"user_api"};
        //实例化
        AutoCodeUtils autoGenerationJavaCode = new AutoCodeUtils(ysConnDB, packageName, tableNames, srcFile, templateDir,xmlFile);
        //设置模板内容
        List<Method> methods = new LinkedList<>();
        methods.add(getAutoMethod());
        //调用生成java代码方法
        autoGenerationJavaCode.autoAddCode("user_api",methodArray,methods);
    }

    private static Method getAutoMethod(){

        Method method = new Method();
        Param[] params = new Param[] {
                new Param("api","接口","String"),
                new Param("name","名称","String")};
        method.setParams(params);
        method.setType(OperateEnum.LIST.getCode());
        method.setName(createMethodName(method.getType(),params));
        method.setComment("按照分组查询");
        method.setParamStr(createParamStr(params));
        method.setParamTypeStr(createParamTypeStr(params));
        method.setRetName("");
        method.setRetType("");
        method.setRetDesc("");

        return method;
    }

    /**
     * 创建方法名。
     * @param params
     * @return
     */
    private static String createParamTypeStr(Param[] params){
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < params.length; i++){
            sb.append(params[i].getType()).append(" ").append(params[i].getName());
            if (i < params.length -1){
                sb.append(", ");
            }
        }
        return sb.toString();
    }

    /**
     * 创建方法名。
     * @param params
     * @return
     */
    private static String createParamStr(Param[] params){
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < params.length; i++){
            sb.append(params[i].getName());
            if (i < params.length -1){
                sb.append(", ");
            }
        }
        return sb.toString();
    }

    /**
     * 创建方法名。
     * @param type
     * @param params
     * @return
     */
    private static String createMethodName(String type,Param[] params){
        StringBuffer sb = new StringBuffer();
        sb.append(type).append("By");
        for (int i = 0; i < params.length; i++){
            if(i > 0){
                sb.append("And").append(StringUtil.upperFirstCase(params[i].getName()));
            } else {
                sb.append(StringUtil.upperFirstCase(params[i].getName()));
            }
        }
        return sb.toString();
    }
}
